plugins {
  // Facilitates Java compilation
  id 'java'
  // For formatting source-code
  alias(libs.plugins.spotless)
}

// Tasks not related to build are split out into their own gradle scripts
// in order to keep build.gradle as compact as possible.
apply from: "$project.rootDir/spotless.gradle"
apply from: "$project.rootDir/optional.gradle"

// Where dependencies are fetched from
repositories {
  mavenCentral()
}

dependencies {
  // Ensure gradle is aware of the patched_client.jar dependency
  implementation files('patched_client.jar')
  // Used to find/populate scripts
  implementation libs.reflections
}

tasks.named('compileJava') {
  // Run spotlessApply after successful compilation rather than before, so
  // that any developer errors can be dealt with prior to formatting
  finalizedBy spotlessApply
}

tasks.named('jar') {
  // Define entry point for application
  manifest {
    attributes 'Main-Class': 'bot.Main'
  }

  // Modify jar task to include all dependencies (a.k.a. create a fat jar)
  from {
    configurations.runtimeClasspath.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
}

// Additional files to clean
tasks.named('clean') {
  delete 'src/main/resources/cache'
  delete "${project.name}.jar"
  delete "${project.name}-${commitDate()}-${commitCount()}-${commitHash()}.zip"
}

// ensure builds are reproducible
// ref: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask).configureEach {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

tasks.register('copyJar', Copy) {
  group 'build'
  description 'Copies jar archive into root directory.'
  dependsOn build

  from rootProject.file("build/libs/${project.name}.jar")
  into rootProject.file(".")
}

// Run copyJar straight after build
build.finalizedBy(copyJar)

tasks.register('createClientCache', Zip) {
  group 'build'
  description 'Create client cache for inclusion in the jar archive.'

  archiveFileName = 'ZipCache.zip'
  destinationDirectory = file('src/main/resources/cache/')
  from 'ClientCache/'
  include '**/*'
}

// Create client cache before processResources runs
processResources.dependsOn(createClientCache)
