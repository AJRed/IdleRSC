plugins {
    // Facilitates Java compilation
    id 'java'
    // For moving the compiled jar to root directory
    id 'base'
    // For formatting source-code
    // NOTE: This is the maximum version that will work with JDK 8.
    id 'com.diffplug.spotless' version '6.12.0'
}

// Tasks not related to build are split out into their own gradle scripts
// in order to keep build.gradle as compact as possible.
apply from: "$project.rootDir/spotless.gradle"

// Where the code is
sourceSets {
    main {
        java {
            srcDir 'src/'
        }
    }
}

// Where dependencies are fetched from
repositories {
    mavenCentral()
}

// Ensure gradle is aware of the patched_client.jar dependency
dependencies {
    // Ensure gradle is aware of the patched_client.jar dependency
    implementation files('patched_client.jar')
    // Used to find/populate scripts
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
}

jar {
    // Define entry point for application
    manifest {
        attributes 'Main-Class': 'bot.Main'
    }

    // Modify jar task to include all dependencies (a.k.a. create a fat jar)
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

// Moves the compiled jar to the root folder
base {
    libsDirectory = getProjectDir()
}

// ensure builds are reproducible
// ref: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.register('cleanBuildDir', Delete) {
    group 'Build'
    description 'Deletes the build directory after compilation.'
    delete 'build'
}

// Ensure all tasks are completed when running build by making build require
// the last task in a dependency chain
build.dependsOn(cleanBuildDir)

// obtain current commit hash
ext.commitHash = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            executable('git')
            args(
                'rev-parse',
                '--short',
                'HEAD'
            )
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (e) {
        return 'dev'
    }
}

// obtain current commit date
ext.commitDate = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            executable('git')
            args(
                'show',
                '--no-patch',
                '--format=%cd',
                '--date=format:%Y.%m.%d'
            )
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (e) {
        return '2001.01.04'
    }
}

// obtain current commit count
ext.commitCount = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            executable('git')
            args(
                'rev-list',
                '--count',
                'HEAD'
            )
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (e) {
        return '1'
    }
}

tasks.register('release', Exec) {
    group 'Distribution'
    description 'Create release zip for end-users.'
    dependsOn build

    def releaseName = "${project.name}-${commitDate()}-${commitCount()}-${commitHash()}"

    executable('git')
    args(
        'archive',
        '--prefix',
        "${releaseName}/",
        'HEAD',
        '--add-file',
        "${project.name}.jar",
        'ColeslawCache',
        'UraniumCache',
        'run_linux.sh',
        'run_windows.bat',
        'Map/data.gz',
        'Map/map.png',
        'README.md',
        '--output',
        "${releaseName}.zip"
    )

    doLast {
        println "Archive saved to ${releaseName}.zip"
    }
}

// update documentation stored in the repository under doc/
tasks.register('updateDocumentation', Copy) {
    group 'Documentation'
    description 'Update documentation stored in the repository under doc/.'
    dependsOn javadoc

    from './build/docs/javadoc'
    into './doc'
}
